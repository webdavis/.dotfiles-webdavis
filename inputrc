# This file controls readline bindings in bash. The name of the file is determined by the
# INPUTRC env_var. If that isn't set then it defaults to ~/.inputrc, and then
# /etc/inputrc.

# Settings {{{1
##########################################################################################

# Tab autocomplete case-insensitive
set completion-ignore-case on

# If completion-ignore-case is 'on' this will treat hyphens (-) and underscores (_) as
# equivalent if it's set to 'on'.
set completion-map-case off

# Display possible completions using colors taken from LS_COLORS.
set colored-stats on

# Show files type when autocompleting.
set visible-stats on

# Determines when the user is queried about viewing the number of possible completions.
# set completion-query-items 16

# Convert Escape to the Meta prefix.
set convert-meta on

# If set to "on", prevents pasted characters from being interpreted as editing commands.
set enable-bracketed-paste off

# If set to 'on' makes readline use a single line for display and will scroll horizontally
# if the command becomes longer than the screen.
set horizontal-scroll-mode off

# Specifies the duration readline will wait for a character when reading an ambiguous key
# sequence in milliseconds.
set keyseq-timeout 1000

# Expand the tilde (often the abbrev for $HOME).
set expand-tilde on

# Completed directory names append a slash.
set mark-directories on
set mark-symlinked-directories on

# Mark modified history commands with an asterisk (*).
set mark-modified-lines on

# If set to "on", menu-completion displays the common prefix of the list of possible
# completions (which may be empty) before cycling through the list.
set menu-complete-display-prefix on

# If set to On, readline will display completions with matches sorted horizontally in
# alphabetical order, rather than down the screen.
set print-completions-horizontally on

# Match hidden files prepended with.
set match-hidden-files on

# List words that have more than one possible match.
set show-all-if-ambiguous on

# If set to On, add a character to the beginning of the prompt indicating the editing
# mode: emacs, Vi command, or Vi insertion.  The mode strings are user-settable.
set show-mode-in-prompt on

# Show all possible completions at once.
set page-completions off

# Vi command line behavior.
set editing-mode vi

# Be more intelligent about autocompleting when in the middle of a string.
set skip-completed-text on

# If set to On (the default), readline attempts to bind the control characters treated
# specially by the kernel's terminal driver to their readline equivalents.
set bind-tty-special-chars on

# Show mode in prompt (@ for Emacs, : for Vi command mode, + for Vi insert mode).
set show-mode-in-prompt on
set emacs-mode-string @
set vi-ins-mode-string +
set vi-cmd-mode-string :
#######################################################################


# Emacs mode mappings. {{{1
##########################################################################################
set keymap emacs
"\C-g": kill-whole-line
"\C-j": vi-editing-mode
"\C-o": redraw-current-line
#######################################################################


# Vi Insert mode bindings. {{{1
##########################################################################################
set keymap vi-insert
Control-A: beginning-of-line
Control-E: end-of-line
Control-B: backward-char
Control-F: forward-char
Control-K: kill-line
Control-L: clear-screen
Control-U: unix-line-discard
Control-W: unix-filename-rubout
Control-O: redraw-current-line
Control-N: next-history
Control-P: previous-history
"\M-u": capitalize-word
"\C-x0": kill-whole-line

# Cycle through the list of possible completions. If "completion-query-items" is set then
# the list of available completions must be less than whatever it is set to for this to
# work.
"\M-s": menu-complete

# Insert "sudo " at the beginning of the command.
"\C-s": '\C-asudo '

# Reload the Bash environment.
"\C-x\C-s": '\C-x0\. ~/.bashrc\015'

# These print the current directory contents in various formats. Press the prefix key
# (Ctrl-x) plus one of the following keys:
# - i = execute long list
# - d = execute long list directory
# - t = execute long list sorted by last modified time
# - Ctrl-i = insert long list
# - Ctrl-d = insert long list directory
# - Ctrl-t = insert long list sorted by last modified time
"\C-x\C-i": '\C-x0ls --color=auto -AFhl\015'
"\C-x\C-d": '\C-x0ls --color=auto -Ahld\015'
"\C-x\C-t": '\C-x0ls --color=auto -AFhlt\015'
"\C-xi": '\C-x0ls --color=auto -AFhl '
"\C-xd": '\C-x0ls --color=auto -Ahld '
"\C-xt": '\C-x0ls --color=auto -AFhlt '

# `tree` commands. Some credit: https://github.com/jessfraz/dotfiles/blob/master/.functions
"\C-x\C-y": '\C-x0tree\015'
"\C-xy": '\C-x0tree '
"\C-x\C-u": '\C-x0tree -Cghpua -I ".git" --dirsfirst "$@" | less -FRNX\015'
"\C-xu": '\C-x0tree -Cghpua -I ".git" '

# Ping Google's DNS server.
"\C-x\C-p": '\C-x0ping -c 3 8.8.8.8\015'
"\C-xp": '\C-x0ping -c 3 '

# Add " --help" to the end of a command and execute.
"\C-xh": '\C-e --help\015'

"\M-s": '\C-x0__projectrt\015'

# Git commands.
"\C-xl": '\C-x0git log --oneline\015'

$if Bash
   "\M-o": magic-space
$endif
#######################################################################


# Vi Command mode bindings. {{{1
##########################################################################################

# Check the Vi Insert mode bindings section for descriptions of the corresponding
# bindings.

set keymap vi-command
"\C-a": beginning-of-line
"\C-e": end-of-line
"\C-o": redraw-current-line
"\C-n": next-history
"\C-p": previous-history
"\C-w": unix-filename-rubout
"\M-u": capitalize-word

# The "$" at the end is useless however it makes the mode-string change quicker,
# i.e. + -> :
"\C-x0": 'i\C-x0\e$'

"\C-s": 'i\C-asudo \e$'

"\C-x\C-s": '\C-x0\. ~/.bashrc\015\e$'

"\C-x\C-i": '\C-x0ls --color=auto -AFhl\015\e$'
"\C-x\C-d": '\C-x0ls --color=auto -Ahld\015\e$'
"\C-x\C-t": '\C-x0ls --color=auto -AFhlt\015\e$'
"\C-xi": '\C-x0ls --color=auto -AFhl '
"\C-xd": '\C-x0ls --color=auto -Ahld '
"\C-xt": '\C-x0ls --color=auto -AFhlt '

"\C-xy": '\C-x0tree\015\e$'
"\C-x\C-Y": '\C-x0tree '
"\C-xu": '\C-x0tree -Cghpua -I ".git" --dirsfirst "$@" | less -FRNX\015\e$'
"\C-x\C-U": '\C-x0tree -Cghpua -I ".git" '

"\C-x\C-p": '\C-x0ping -c 3 8.8.8.8\015\e$'
"\C-xp": '\C-x0ping -c 3 '

"\C-xh": 'i\C-e --help\015\e'

"\M-s": 'i\C-x0__projectrt\015\e'

"\C-xl": 'i\C-x0git log --oneline\015\e'

$if Bash
    "\M-o": magic-space
$endif
